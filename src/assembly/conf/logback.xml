<?xml version="1.0" encoding="UTF-8"?>
<!-- 配置文件每隔1分钟，就检查更新 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义参数常量，便于后面直接用${name}来获取value值 -->
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"/>
    <property name="log.filePath" value="../logs/"/>
    <property name="log.maxHistory" value="7"/>

    <!-- ch.qos.logback.core.rolling.RollingFileAppender 文件日志输出到文件 -->
    <appender name="fileAppender"
              class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 当天生成的日志文件的路径 -->
        <file>${log.filePath}/m3u8.log</file>
        <!-- 设置基于时间(每天)的滚动策略，也就是将日志内容按照日期来写入到相应的文件中-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 当天之前的每天生成的日志文件的路径 -->
            <fileNamePattern>${log.filePath}/m3u8-%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 最大历史保存文件的数量，只保存最近30天的日志文件，超出的会被删除-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!-- 过去使用layout，现在都推荐使用encoder
             作用一：将日志信息转换（格式化）为字符串
             作用二：然后写入到文件中-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!-- 也是一种<logger>,是所有<logger>的父级 -->
    <!-- 不设置additivity属性，或者设置additivity = true的<logger>,会继承root的子标签<appender-ref ref="console" />的设置，
        将它自己设置的level属性级别及以上的日志打印到控制台 -->
    <root level="info">
        <appender-ref ref="fileAppender"/>
    </root>

</configuration>